<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Travis&#39; Blog</title>
  <icon>https://travisroad.github.io/icon.png</icon>
  
  <link href="https://travisroad.github.io/atom.xml" rel="self"/>
  
  <link href="https://travisroad.github.io/"/>
  <updated>2022-05-06T14:09:22.654Z</updated>
  <id>https://travisroad.github.io/</id>
  
  <author>
    <name>Travis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用 fzf 实现的历史记录</title>
    <link href="https://travisroad.github.io/2022/05/01/shell0_%E6%8A%98%E8%85%BEzsh%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>https://travisroad.github.io/2022/05/01/shell0_%E6%8A%98%E8%85%BEzsh%E7%9A%84%E7%BB%8F%E5%8E%86/</id>
    <published>2022-04-30T16:35:59.000Z</published>
    <updated>2022-05-06T14:09:22.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置历史命令查看"><a class="header-anchor" href="#设置历史命令查看"></a>设置历史命令查看</h2><p>这里我想达到的目的是按下 <code>C-r</code> 按键时会弹出窗口来选择历史，并且带有模糊搜索的功能。恰好 <code>fzf</code> 命令有这个功能，用包管理器安装好之后，就可以开始写小脚本了。</p><p><img data-src="/image/zsh_history.gif" alt=""></p><span id="more"></span><p><img data-src="/image/2022-04-30-23-46-22.jpeg" alt=""></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># select history command in fzf mode</span><span class="token keyword">function</span> <span class="token function-name function">hist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span>LBUFFER -gt <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">BUFFER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">history</span> -n <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'!seen[$0]++'</span> <span class="token operator">|</span> fzf -e --reverse --no-sort --tac --border<span class="token operator">=</span>rounded --height<span class="token operator">=</span><span class="token number">50</span>% --query $LBUFFER<span class="token variable">)</span></span>    <span class="token keyword">else</span>        <span class="token assign-left variable">BUFFER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">history</span> -n <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'!seen[$0]++'</span> <span class="token operator">|</span> fzf -e --reverse --no-sort --tac --border<span class="token operator">=</span>rounded --height<span class="token operator">=</span><span class="token number">50</span>%<span class="token variable">)</span></span>    <span class="token keyword">fi</span>    <span class="token assign-left variable">CURSOR</span><span class="token operator">=</span><span class="token variable">$#</span>BUFFER    zle redisplay<span class="token punctuation">&#125;</span>zle -N histbindkey <span class="token string">'^r'</span> hist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解释"><a class="header-anchor" href="#解释"></a>解释</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> -n <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'!seen[$0]++'</span> <span class="token operator">|</span> fzf -e --reverse --no-sort --tac --border<span class="token operator">=</span>rounded --height<span class="token operator">=</span><span class="token number">50</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看看 <code>history</code> 命令输出的格式，看到 <code>omz_history</code> 默认是带有前面的数字的，我们把它用 <code>-n</code> 选项取消掉。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜ repo ✗ <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token number">6174</span>  docker container <span class="token function">ls</span> -a <span class="token number">6175</span>  docker container <span class="token function">ls</span> -h <span class="token number">6176</span>  docker <span class="token function">ps</span> -h <span class="token number">6177</span>  docker <span class="token function">ls</span> <span class="token number">6178</span>  docker list <span class="token number">6179</span>  <span class="token function">which</span> <span class="token function">history</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>管道中的第二命令 <code>awk '!seen[$0]++'</code> 是用来去重的 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，使用 <code>uniq</code> 命令的话需要将 history 排序，并不符合我们的需求。</p><p>最后就是 <code>fzf</code> 命令了。简单解释一下，<code>fzf</code> 能接受多行输入，将之变成一个选择界面。<code>--reverse --border=rounded --height=50%</code> 这几个选项都是调整布局的选项。其他几个选项的解释如下。</p><pre class="line-numbers language-none"><code class="language-none">-e 开启精确匹配--no-sort 不要排序--tac 逆转输入，因为我们希望最后的历史记录在最前面--query 查询词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后使用 <code>zle</code>(zsh line editor) 来把我们选择的命令写入命令行当中</p><h2 id="设置-snippets"><a class="header-anchor" href="#设置-snippets"></a>设置 snippets</h2><p>使用别人写好的工具 <a href="https://github.com/knqyf263/pet">pet</a>。相比于自己在 shell 中实现，<code>pet</code> 提供了将 <code>snippets</code> 同步到仓库的功能（虽然自己写也不难）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Select snippets at the current line (like C-r)</span><span class="token keyword">function</span> <span class="token function-name function">pet-select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token assign-left variable">BUFFER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>pet search --color --query <span class="token string">"<span class="token variable">$LBUFFER</span>"</span><span class="token variable">)</span></span>  <span class="token assign-left variable">CURSOR</span><span class="token operator">=</span><span class="token variable">$#</span>BUFFER  zle redisplay<span class="token punctuation">&#125;</span>zle -N pet-selectstty -ixonbindkey <span class="token string">'^s'</span> pet-select<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://unix.stackexchange.com/questions/11939/how-to-get-only-the-unique-results-without-having-to-sort-data">https://unix.stackexchange.com/questions/11939/how-to-get-only-the-unique-results-without-having-to-sort-data</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;设置历史命令查看&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#设置历史命令查看&quot;&gt;&lt;/a&gt;设置历史命令查看&lt;/h2&gt;
&lt;p&gt;这里我想达到的目的是按下 &lt;code&gt;C-r&lt;/code&gt; 按键时会弹出窗口来选择历史，并且带有模糊搜索的功能。恰好 &lt;code&gt;fzf&lt;/code&gt; 命令有这个功能，用包管理器安装好之后，就可以开始写小脚本了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/image/zsh_history.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="zsh" scheme="https://travisroad.github.io/tags/zsh/"/>
    
    <category term="fzf" scheme="https://travisroad.github.io/tags/fzf/"/>
    
    <category term="linux" scheme="https://travisroad.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>dpkg</title>
    <link href="https://travisroad.github.io/2022/03/24/dpkg/"/>
    <id>https://travisroad.github.io/2022/03/24/dpkg/</id>
    <published>2022-03-24T14:35:56.000Z</published>
    <updated>2022-05-06T14:09:04.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dpkg-误删除-info-目录"><a class="header-anchor" href="#dpkg-误删除-info-目录"></a>dpkg 误删除 info 目录</h2><p>最近开始用 <code>Linux</code> 了， 比较怂所以采用了对新手比较友好的 <code>ubuntu</code>。</p><p>在安装 <code>wine</code> 的时候手抖把 <code>info</code> 目录删除了，这个目录是用来存储 <code>dpkg</code> 的安装信息的。之后的安装都会弹出 <code>warning</code>， 显示一堆软件找不到。</p><p>应用了以下两个命令之后可以解决大部分的警告。说的简单一点就是把软件重新装了一遍。剩下的警告可以手动解决。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get --reinstall install &#96;dpkg --get-selections | grep &#39;[[:space:]]install&#39; | cut -f1&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for package in $(apt-get upgrade 2&gt;&amp;1 | grep &quot;warning: files list file for package &#39;&quot; | grep -Po &quot;[^&#39;\n ]+&#39;&quot; | grep -Po &quot;[^&#39;]+&quot;); do    apt-get install --reinstall &quot;$package&quot;;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://blog.wingszeng.top/recover-dpkg-info/">https://blog.wingszeng.top/recover-dpkg-info/</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dpkg-误删除-info-目录&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#dpkg-误删除-info-目录&quot;&gt;&lt;/a&gt;dpkg 误删除 info 目录&lt;/h2&gt;
&lt;p&gt;最近开始用 &lt;code&gt;Linux&lt;/code&gt; 了， 比较怂所以采用</summary>
      
    
    
    
    <category term="Linux" scheme="https://travisroad.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://travisroad.github.io/tags/Linux/"/>
    
    <category term="dpkg" scheme="https://travisroad.github.io/tags/dpkg/"/>
    
    <category term="Ubuntu" scheme="https://travisroad.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统中的信号量</title>
    <link href="https://travisroad.github.io/2022/02/28/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <id>https://travisroad.github.io/2022/02/28/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F/</id>
    <published>2022-02-28T12:53:56.000Z</published>
    <updated>2022-05-03T16:36:41.112Z</updated>
    
    <content type="html"><![CDATA[<p>除了 <code>Kill</code> 信号量，其他信号都留给了进程喘息之机，允许进行一些后处理。</p><p><code>INT</code>, <code>TERM</code>, <code>HUP</code>, <code>QUIT</code> 都可以被称为可忽略信号。<br><code>KILL</code> 信号不可忽略，强制终止进程。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kill -lHUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="可忽略信号"><a class="header-anchor" href="#可忽略信号"></a>可忽略信号</h2><p>2 号信号 <code>INT</code> (interrupt) 最弱。它的意思是“停止你现在正在做的事情并等待进一步的用户输入”。这是终端中 <code>&lt;C-c&gt;</code> 产生的信号</p><p>15 号信号 <code>TERM</code> (terminate) 是正常的终止信号（<code>kill</code> 默认发出的信号）。它告诉应用程序干净地退出。该信号允许 <code>trap</code> 处理，它使接收进程能够以有序的方式进行一些清理。如果不想在关键操作中被中断，那么应用程序往往会忽略 <code>SIGTERM</code>。</p><p>1 号信号 <code>HUP</code> (hang up) 在苛刻程度上与 <code>SIGTERM</code> 大致相当。当用户与终端断开连接时，它会自动发送到终端中运行的应用程序。</p><p>3 号信号 <code>QUIT</code> 是可忽略信号中最苛刻的。当想立刻终止进程时可以使用，并且默认情况下它通常会留下一个 <code>core dump file</code>。</p><span id="more"></span><h2 id="链接"><a class="header-anchor" href="#链接"></a>链接</h2><ul><li><a href="http://www.linuxcommand.org/lc3_man_pages/kill1.html">http://www.linuxcommand.org/lc3_man_pages/kill1.html</a></li><li><a href="https://unix.stackexchange.com/questions/251195/difference-between-less-violent-kill-signal-hup-1-int-2-and-term-15">https://unix.stackexchange.com/questions/251195/difference-between-less-violent-kill-signal-hup-1-int-2-and-term-15</a></li><li><a href="https://www.semicolonandsons.com/code_diary/unix/kill-vs-term-vs-int-vs-quit-signals">https://www.semicolonandsons.com/code_diary/unix/kill-vs-term-vs-int-vs-quit-signals</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;除了 &lt;code&gt;Kill&lt;/code&gt; 信号量，其他信号都留给了进程喘息之机，允许进行一些后处理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;INT&lt;/code&gt;, &lt;code&gt;TERM&lt;/code&gt;, &lt;code&gt;HUP&lt;/code&gt;, &lt;code&gt;QUIT&lt;/code&gt; 都可以被称为可忽略信号。&lt;br&gt;
&lt;code&gt;KILL&lt;/code&gt; 信号不可忽略，强制终止进程。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ kill -l
HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;可忽略信号&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#可忽略信号&quot;&gt;&lt;/a&gt;可忽略信号&lt;/h2&gt;
&lt;p&gt;2 号信号 &lt;code&gt;INT&lt;/code&gt; (interrupt) 最弱。它的意思是“停止你现在正在做的事情并等待进一步的用户输入”。这是终端中 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 产生的信号&lt;/p&gt;
&lt;p&gt;15 号信号 &lt;code&gt;TERM&lt;/code&gt; (terminate) 是正常的终止信号（&lt;code&gt;kill&lt;/code&gt; 默认发出的信号）。它告诉应用程序干净地退出。该信号允许 &lt;code&gt;trap&lt;/code&gt; 处理，它使接收进程能够以有序的方式进行一些清理。如果不想在关键操作中被中断，那么应用程序往往会忽略 &lt;code&gt;SIGTERM&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;1 号信号 &lt;code&gt;HUP&lt;/code&gt; (hang up) 在苛刻程度上与 &lt;code&gt;SIGTERM&lt;/code&gt; 大致相当。当用户与终端断开连接时，它会自动发送到终端中运行的应用程序。&lt;/p&gt;
&lt;p&gt;3 号信号 &lt;code&gt;QUIT&lt;/code&gt; 是可忽略信号中最苛刻的。当想立刻终止进程时可以使用，并且默认情况下它通常会留下一个 &lt;code&gt;core dump file&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://travisroad.github.io/tags/Linux/"/>
    
    <category term="Signal" scheme="https://travisroad.github.io/tags/Signal/"/>
    
  </entry>
  
  <entry>
    <title>pytorch 中 DataLoader 的问题</title>
    <link href="https://travisroad.github.io/2022/01/25/pytorch%E4%B8%ADDataLoader%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://travisroad.github.io/2022/01/25/pytorch%E4%B8%ADDataLoader%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-25T14:09:14.000Z</published>
    <updated>2022-05-03T16:36:46.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复现问题"><a class="header-anchor" href="#复现问题"></a>复现问题</h2><p><code> RuntimeError: DataLoader worker (pid(s) 34132) exited unexpectedly</code>，但是如果将 <code>num_workers</code> 设置为 0，则不会出现这个问题。只用单线程跑的话不会出问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">class</span> <span class="token class-name">WineDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># data loading</span>        xy <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>            <span class="token string">"./pytorchTutorial/data/wine/wine.csv"</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n_samples <span class="token operator">=</span> xy<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># number of samples</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>n_samplesdataset <span class="token operator">=</span> WineDataset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># first_data = dataset[0]</span><span class="token comment"># features, labels = first_data</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>dataiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span>data <span class="token operator">=</span> dataiter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>features<span class="token punctuation">,</span> labels <span class="token operator">=</span> data<span class="token keyword">print</span><span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决"><a class="header-anchor" href="#解决"></a>解决</h2><p>发现有很多人都有这个问题，<a href="https://github.com/pytorch/pytorch/issues/5301">https://github.com/pytorch/pytorch/issues/5301</a>。但是貌似还没有人解释为什么这个问题会出现。</p><blockquote><p>I had a similar error with my datasets.<br>The problem was that I had incorrect dimensions at some point which made some of the tensors become huge, so they were overfilling the memory.</p><p>Correcting the dimensions solved this problem.</p></blockquote><p>解决方法很简单，把迭代部分放在 <code>__main__</code> 中就可以了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    dataset <span class="token operator">=</span> WineDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    dataiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span>    data <span class="token operator">=</span> dataiter<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    features<span class="token punctuation">,</span> labels <span class="token operator">=</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复现问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#复现问题&quot;&gt;&lt;/a&gt;复现问题&lt;/h2&gt;
&lt;p&gt;&lt;code&gt; RuntimeError: DataLoader worker (pid(s) 34132) exited unexpected</summary>
      
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://travisroad.github.io/tags/python/"/>
    
    <category term="pytorch" scheme="https://travisroad.github.io/tags/pytorch/"/>
    
    <category term="DataLoader" scheme="https://travisroad.github.io/tags/DataLoader/"/>
    
    <category term="error" scheme="https://travisroad.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>javascript 的异步问题和 this 问题</title>
    <link href="https://travisroad.github.io/2022/01/14/vue3/"/>
    <id>https://travisroad.github.io/2022/01/14/vue3/</id>
    <published>2022-01-14T10:17:00.000Z</published>
    <updated>2022-05-03T16:37:01.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a class="header-anchor" href="#代码"></a>代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- record has been declared --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(record)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-modal</span> <span class="token attr-name">data-source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>treeSelectData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-modal</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">"wangeditor"</span><span class="token punctuation">;</span> <span class="token comment">// a Rich Text Format Editor</span><span class="token comment">// variables has been declared</span><span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  modalVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// show the a-modal</span>  doc<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>  treeSelectData<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>docs<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setDisable</span><span class="token punctuation">(</span>treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">,</span> record<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"root"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// treeSelectData is the datasource of a-modal</span>  <span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2 id="现象"><a class="header-anchor" href="#现象"></a>现象</h2><h3 id="异步问题"><a class="header-anchor" href="#异步问题"></a>异步问题</h3><p>报错 <code>Invalid selector: #content</code>，只有我按下 edit 按钮时，modal 才会出现。也就是说这之前 DOM 里面是没有元素 <code>&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</code> 的。</p><p>但是如果将 edit 改造成一个异步方法，在 <code>treeSelectData.value.unshift(&#123; id: &quot;0&quot;, name: &quot;root&quot; &#125;);</code> 前加上 <code>await</code>，就不会报错并且也能正常显示出 <code>editor</code>。</p><p>所以这是为什么呢？</p><p>我的猜测是只有在数据源准备好的时候 a-modal 才会显示，所以我把 <code>treeSelectData.value.unshift(&#123; id: &quot;0&quot;, name: &quot;root&quot; &#125;);</code> 加上 <code>await</code> 就能解决问题了。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">"wangeditor"</span><span class="token punctuation">;</span> <span class="token comment">// a Rich Text Format Editor</span><span class="token comment">// variables has been declared</span><span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>record<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  modalVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// show the a-modal</span>  doc<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>  treeSelectData<span class="token punctuation">.</span>value <span class="token operator">=</span> Tool<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>docs<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setDisable</span><span class="token punctuation">(</span>treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">,</span> record<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> treeSelectData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"root"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// treeSelectData is the datasource of a-modal</span>  <span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="this-的问题"><a class="header-anchor" href="#this-的问题"></a>this 的问题</h3><p><code>handleQueryContent(record)</code> 是一个异步方法，从后端 <code>GET</code> 一个字符串，返回一个 <code>Promise&lt;string&gt;</code>。我的目的是直接在富文本编辑器中显示这个数据，显示方法大概是 <code>editor.txt.html(val:string)</code>。</p><pre class="line-numbers language-typeScript" data-language="typeScript"><code class="language-typeScript">handleQueryContent(record).then(editor.txt.html);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时如果直接调用 <code>handleQueryContent(record).then(editor.txt.html)</code>，就会报错 <code>editor undefined</code>。</p><p>调试一下发现是这个函数内部使用了 <code>this</code>，我这里这样调用是把调用处的上下文 <code>this</code> 传入了 <code>editor.txt.html()</code>。</p><h3 id="解决办法"><a class="header-anchor" href="#解决办法"></a>解决办法</h3><ol><li><p>使用箭头函数或者匿名函数就可以了，如下：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">handleQueryContent</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果是自己写代码，也可以在 <code>editor</code>实例化的时候将 <code>this</code> 绑定到 <code>editor</code> 上 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></li><li><p>也可以在对象实例化的时候用 <code>that</code> 获取 <code>this</code>，之后一直用 <code>that</code> 就没有歧义了 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p></li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://stackoverflow.com/questions/4011793/this-is-undefined-in-javascript-class-methods">https://stackoverflow.com/questions/4011793/this-is-undefined-in-javascript-class-methods</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;代码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-html&quot; data-language=&quot;html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- record has been declared --&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a-button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;edit(record)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;edit&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a-button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a-modal&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-source&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;treeSelectData&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a-form-item&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a-form-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a-modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;line-numbers language-typescript&quot; data-language=&quot;typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Editor &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;wangeditor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// a Rich Text Format Editor&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// variables has been declared&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;record&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
  modalVisible&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// show the a-modal&lt;/span&gt;
  doc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Tool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;record&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  treeSelectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Tool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;docs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setDisable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;treeSelectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; record&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  treeSelectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;root&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// treeSelectData is the datasource of a-modal&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; editor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#content&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  editor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端" scheme="https://travisroad.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://travisroad.github.io/tags/Vue3/"/>
    
    <category term="异步" scheme="https://travisroad.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
    <category term="问题" scheme="https://travisroad.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="this" scheme="https://travisroad.github.io/tags/this/"/>
    
    <category term="js" scheme="https://travisroad.github.io/tags/js/"/>
    
    <category term="ts" scheme="https://travisroad.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>jpa 的 lazy 加载问题</title>
    <link href="https://travisroad.github.io/2022/01/07/jpa%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://travisroad.github.io/2022/01/07/jpa%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-07T10:12:55.000Z</published>
    <updated>2022-05-03T16:36:34.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2><ul><li><strong>在同一个 <code>session</code> 中</strong>，<code>LAZY</code> 模式下，并不会将标记为懒加载的元素取出，只有在显式调用 <code>.get()</code> 方法时，才会取出。</li><li>在 <code>EAGER</code> 模式下，则会一股脑取出，但是如果取出了一个非常大的 <code>List</code>，而我们并不需要这个属性，这里就会有很严重的性能问题</li></ul><h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence-api#:~:text=Suppose%20you%20are%20using%20Spring">difference-between-fetchtype-lazy-and-eager-in-java-persistence-api</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在同一个 &lt;code&gt;session&lt;/code&gt; 中&lt;/strong&gt;，&lt;code&gt;LAZY&lt;/code&gt; 模式下，并不会将</summary>
      
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://travisroad.github.io/tags/Java/"/>
    
    <category term="jpa" scheme="https://travisroad.github.io/tags/jpa/"/>
    
    <category term="Springboot" scheme="https://travisroad.github.io/tags/Springboot/"/>
    
    <category term="eager" scheme="https://travisroad.github.io/tags/eager/"/>
    
    <category term="lazy" scheme="https://travisroad.github.io/tags/lazy/"/>
    
  </entry>
  
  <entry>
    <title>双城之战</title>
    <link href="https://travisroad.github.io/2022/01/07/%E5%8F%8C%E5%9F%8E%E4%B9%8B%E6%88%98/"/>
    <id>https://travisroad.github.io/2022/01/07/%E5%8F%8C%E5%9F%8E%E4%B9%8B%E6%88%98/</id>
    <published>2022-01-07T09:41:09.000Z</published>
    <updated>2022-05-06T14:08:50.126Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>双城之战</h1><ul><li>剧情评分 6.5/10</li><li>制作评分 8.5/10</li></ul><span id="more"></span><p><img data-src="/image/2022-01-07-17-47-13.png" alt=""></p><p>一句话感受：<strong>一部够爽的片子</strong></p><p>我本人完全没有玩过英雄联盟，但是看的时候依然兴致勃勃，相信在其中有很多游戏玩家能发现的彩蛋。</p><p>今敏的片子里，哪怕是一片云都有意义。在双城之战中也是如此。各个场景中的小物件可以看出制作团队的用心（尤其是在摆烂之风盛行的疫情波及之年）。</p><p>剧情方面但是在接受了马克思主义熏陶之后，对这种下城对上城的摆烂式抗争感到有些不解。我们自己的幸福应该靠我们自己争取，而不是靠既得利益者的施舍。也许有人会说这种革命未免有些理想主义，但是我们的革命往往就是需要这种理想主义者冲锋在前。</p><p>另外，双城之战做的比较好的的一点是，他没有奢求制作水平和剧本水平双高，制作方面可以看出来下了非常大功夫。对于一个初出茅庐的制作团队，要在两个方面都寻求突破无疑是危险的，双管齐下的结果很可能就是一个都得不到。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;双城之战&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;剧情评分 6.5/10&lt;/li&gt;
&lt;li&gt;制作评分 8.5/10&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="影评" scheme="https://travisroad.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
    <category term="双城之战" scheme="https://travisroad.github.io/tags/%E5%8F%8C%E5%9F%8E%E4%B9%8B%E6%88%98/"/>
    
    <category term="影视" scheme="https://travisroad.github.io/tags/%E5%BD%B1%E8%A7%86/"/>
    
    <category term="动漫" scheme="https://travisroad.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
    <category term="美国" scheme="https://travisroad.github.io/tags/%E7%BE%8E%E5%9B%BD/"/>
    
    <category term="拳头" scheme="https://travisroad.github.io/tags/%E6%8B%B3%E5%A4%B4/"/>
    
    <category term="Netflix" scheme="https://travisroad.github.io/tags/Netflix/"/>
    
    <category term="英雄联盟" scheme="https://travisroad.github.io/tags/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>idea 开启热重载</title>
    <link href="https://travisroad.github.io/2021/12/30/idea%E5%BC%80%E5%90%AF%E7%83%AD%E9%87%8D%E8%BD%BD/"/>
    <id>https://travisroad.github.io/2021/12/30/idea%E5%BC%80%E5%90%AF%E7%83%AD%E9%87%8D%E8%BD%BD/</id>
    <published>2021-12-30T07:50:00.000Z</published>
    <updated>2022-05-03T16:36:30.492Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://youtrack.jetbrains.com/issue/IDEA-274903">解决链接</a></p><p><code>Advanced settings</code> &gt; <code>Allow auto-make to start enven if developed application is currently running</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/IDEA-274903&quot;&gt;解决链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Advanced settings&lt;/code&gt; &amp;gt; &lt;code&gt;Allow auto-make to s</summary>
      
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="https://travisroad.github.io/tags/java/"/>
    
    <category term="idea" scheme="https://travisroad.github.io/tags/idea/"/>
    
    <category term="jetbrains" scheme="https://travisroad.github.io/tags/jetbrains/"/>
    
    <category term="Spring" scheme="https://travisroad.github.io/tags/Spring/"/>
    
    <category term="Spring boot" scheme="https://travisroad.github.io/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>windows 3000 4200 端口神奇的消失事件</title>
    <link href="https://travisroad.github.io/2021/12/28/windows3000-4200port/"/>
    <id>https://travisroad.github.io/2021/12/28/windows3000-4200port/</id>
    <published>2021-12-27T16:20:25.000Z</published>
    <updated>2022-05-03T16:37:07.708Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>😥</h1><p>今天在写 react 玩具的时候发现 3000 端口始终被占用，但是在我运行<code>netstat -ano | find 3000</code>后并没有结果，也就是说此时 3000 端口并没有被占用，上网搜索之后很多答案都是指示 3000 被占用，使用<code>npx kill-port 3000</code>这样的命令<code>kill</code>掉就好了，但是很显然这样并不能解决问题。</p><p>最后终于看到了有用的帖子，这是链接：<a href="https://blog.miniasp.com/post/2019/03/31/Ports-blocked-by-Windows-10-for-unknown-reason">Windows 10 無法 LISTEN Port 4200 與 Port 3000 的靈異事件整理</a>。</p><span id="more"></span><p>最后采用了如下方法解决</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">netsh int ipv4 show excludedportrange protocol=tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出了所有的保留端口，发现 3000 被保留了。那么这个时候我们要做的事情就很简单了，把 3000 的端口设为<strong>不保留</strong>的即可。</p><ol><li><p>首先关闭<code>wsl</code>，重启<code>winnet</code>服务，释放保留的<em>port range</em></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 1. 停用 WSL 服務</span> wsl <span class="token operator">--</span>shutdown wsl <span class="token operator">-</span>l <span class="token operator">-</span>v <span class="token comment"># 2. 停用 Docker 服務</span> <span class="token comment"># 3. 重啟 WinNAT 服務</span> net stop winnat net <span class="token function">start</span> winnat <span class="token comment"># 4. 啟動 Docker 服務</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设定自己的保留部分</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=3000netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=3001netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=4200netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=5000netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=5001netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=8080netsh int ipv4 add excludedportrange protocol=tcp numberofports=1 startport=8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要删除也很容易</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=3000netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=3001netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=4200netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=5000netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=5001netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=8080netsh int ipv4 delete excludedportrange protocol=tcp numberofports=1 startport=8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;😥&lt;/h1&gt;
&lt;p&gt;今天在写 react 玩具的时候发现 3000 端口始终被占用，但是在我运行&lt;code&gt;netstat -ano | find 3000&lt;/code&gt;后并没有结果，也就是说此时 3000 端口并没有被占用，上网搜索之后很多答案都是指示 3000 被占用，使用&lt;code&gt;npx kill-port 3000&lt;/code&gt;这样的命令&lt;code&gt;kill&lt;/code&gt;掉就好了，但是很显然这样并不能解决问题。&lt;/p&gt;
&lt;p&gt;最后终于看到了有用的帖子，这是链接：&lt;a href=&quot;https://blog.miniasp.com/post/2019/03/31/Ports-blocked-by-Windows-10-for-unknown-reason&quot;&gt;Windows 10 無法 LISTEN Port 4200 與 Port 3000 的靈異事件整理&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="error" scheme="https://travisroad.github.io/tags/error/"/>
    
    <category term="windows" scheme="https://travisroad.github.io/tags/windows/"/>
    
    <category term="port" scheme="https://travisroad.github.io/tags/port/"/>
    
    <category term="bug" scheme="https://travisroad.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Spring 配置 maven 错误</title>
    <link href="https://travisroad.github.io/2021/12/27/spring%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/"/>
    <id>https://travisroad.github.io/2021/12/27/spring%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/</id>
    <published>2021-12-27T14:02:12.000Z</published>
    <updated>2022-05-03T16:36:56.172Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>pom.xml</code>中指定的 jdk 版本号和环境变量中的 java 版本号需要一致，否则 maven 会报错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在&lt;code&gt;pom.xml&lt;/code&gt;中指定的 jdk 版本号和环境变量中的 java 版本号需要一致，否则 maven 会报错。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://travisroad.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="https://travisroad.github.io/tags/java/"/>
    
    <category term="Spring" scheme="https://travisroad.github.io/tags/Spring/"/>
    
    <category term="error" scheme="https://travisroad.github.io/tags/error/"/>
    
    <category term="maven" scheme="https://travisroad.github.io/tags/maven/"/>
    
  </entry>
  
</feed>
